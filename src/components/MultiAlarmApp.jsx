import React, { useState, useEffect, useRef } from 'react'

export default function MultiAlarmApp() {
  const [alarms, setAlarms] = useState(() => {
    const saved = localStorage.getItem('alarms')
    return saved ? JSON.parse(saved) : []
  })
  const [newTime, setNewTime] = useState('')
  const [newLabel, setNewLabel] = useState('')
  const [uploadedSounds, setUploadedSounds] = useState(() => {
    const saved = localStorage.getItem('sounds')
    return saved ? JSON.parse(saved) : []
  })
  const [selectedSound, setSelectedSound] = useState('')
  const [themeColor, setThemeColor] = useState('#4f46e5')

  // üîä —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–≤—É–∫–∞
  const [audioUnlocked, setAudioUnlocked] = useState(false)

  const audioRefs = useRef({})

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  useEffect(() => {
    localStorage.setItem('alarms', JSON.stringify(alarms))
  }, [alarms])

  useEffect(() => {
    localStorage.setItem('sounds', JSON.stringify(uploadedSounds))
  }, [uploadedSounds])

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date()
      const current = `${now.getHours().toString().padStart(2, '0')}:${now
        .getMinutes()
        .toString()
        .padStart(2, '0')}`

      alarms.forEach(alarm => {
        if (alarm.time === current && !alarm.triggered) {
          triggerAlarm(alarm)
        }
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [alarms, audioUnlocked])

  // —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–≤—É–∫–∞
  function unlockAudio() {
    // –ø—Ä–æ–∏–≥—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—É–∫
    const a = new Audio(uploadedSounds[0]?.url || '/beep.mp3')
    a.play().catch(() => {})
    setAudioUnlocked(true)
  }

  function triggerAlarm(alarm) {
    alert(`–ë—É–¥–∏–ª—å–Ω–∏–∫: ${alarm.label || alarm.time}`)

    // üîä –∏–≥—Ä–∞–µ–º –∑–≤—É–∫, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    if (audioUnlocked) {
      const soundUrl =
        uploadedSounds.find(s => s.id === alarm.soundId)?.url ||
        '/beep.mp3'
      const a = new Audio(soundUrl)
      a.play().catch(err => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è', err))
    }

    setAlarms(prev =>
      prev.map(a =>
        a.id === alarm.id ? { ...a, triggered: true } : a
      )
    )
  }

  function addAlarm() {
    if (!newTime) return
    const newAlarm = {
      id: Date.now(),
      time: newTime,
      label: newLabel,
      soundId: selectedSound,
      triggered: false,
    }
    setAlarms([...alarms, newAlarm])
    setNewTime('')
    setNewLabel('')
  }

  function deleteAlarm(id) {
    setAlarms(alarms.filter(a => a.id !== id))
  }

  function handleUploadSound(e) {
    const file = e.target.files[0]
    if (!file) return
    const url = URL.createObjectURL(file)
    const newSound = {
      id: Date.now(),
      name: file.name,
      url,
    }
    setUploadedSounds(prev => [...prev, newSound])
    setSelectedSound(newSound.id)
  }

  function changeThemeColor(e) {
    setThemeColor(e.target.value)
  }

  return (
    <div
      className="min-h-screen p-4 text-gray-900"
      style={{ backgroundColor: themeColor + '20' }}
    >
      <h1 className="text-2xl font-bold mb-4">–ú—É–ª—å—Ç–∏-–±—É–¥–∏–ª—å–Ω–∏–∫</h1>

      {!audioUnlocked && (
        <div className="mb-4">
          <button
            onClick={unlockAudio}
            className="px-4 py-2 bg-green-500 text-white rounded"
          >
            –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–≤—É–∫
          </button>
        </div>
      )}

      <div className="mb-4 flex items-center gap-2">
        <label className="font-medium">–¶–≤–µ—Ç —Ç–µ–º—ã:</label>
        <input
          type="color"
          value={themeColor}
          onChange={changeThemeColor}
        />
      </div>

      <div className="mb-4 flex flex-col md:flex-row md:items-end gap-2">
        <div>
          <label className="block font-medium">–í—Ä–µ–º—è</label>
          <input
            type="time"
            value={newTime}
            onChange={e => setNewTime(e.target.value)}
            className="border p-2 rounded"
          />
        </div>
        <div>
          <label className="block font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
          <input
            type="text"
            value={newLabel}
            onChange={e => setNewLabel(e.target.value)}
            className="border p-2 rounded"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥—ä—ë–º"
          />
        </div>
        <div>
          <label className="block font-medium">–ó–≤—É–∫</label>
          <select
            value={selectedSound}
            onChange={e => setSelectedSound(e.target.value)}
            className="border p-2 rounded"
          >
            <option value="">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</option>
            {uploadedSounds.map(s => (
              <option key={s.id} value={s.id}>
                {s.name}
              </option>
            ))}
          </select>
        </div>
        <div>
          <label className="block font-medium">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫</label>
          <input
            type="file"
            accept="audio/*"
            onChange={handleUploadSound}
            className="border p-2 rounded"
          />
        </div>
        <button
          onClick={addAlarm}
          className="px-4 py-2 bg-indigo-500 text-white rounded h-10 self-center"
        >
          –î–æ–±–∞–≤–∏—Ç—å
        </button>
      </div>

      <ul>
        {alarms.map(a => (
          <li
            key={a.id}
            className="flex items-center justify-between p-2 mb-2 bg-white rounded shadow"
          >
            <div>
              <div className="font-semibold">{a.time}</div>
              <div className="text-sm text-gray-600">{a.label}</div>
              <div className="text-xs text-gray-500">
                –ó–≤—É–∫:{' '}
                {uploadedSounds.find(s => s.id === a.soundId)?.name ||
                  '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}
              </div>
            </div>
            <button
              onClick={() => deleteAlarm(a.id)}
              className="px-2 py-1 bg-red-500 text-white rounded"
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
          </li>
        ))}
      </ul>
    </div>
  )
}
